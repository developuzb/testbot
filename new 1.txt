import logging
import re
import random
import telegram.error
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, InputTextMessageContent, InlineQueryResultArticle
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from uuid import uuid4
from .database import USERS, save_users, get_services
from .utils import is_match

logger = logging.getLogger(__name__)

yumshoq_startlar = [
    "😊 Endi bemalol xizmatni tanlashingiz mumkin.\nBuyurtma berish juda oson va atigi 1 daqiqa!",
    "🔎 Qidiruv tugmasini bosing yoki xizmat nomini yozing — biz yordam beramiz!",
    "💼 Xizmatni tanlang — biz sifatli xizmat bilan xizmatdamiz!",
    "🚀 Hammasi tayyor! Endi buyurtma berish uchun atigi bir necha bosqich kifoya.",
    "✅ Buyurtma berish qulay, tez va ishonchli! Qani boshlaymizmi?"
]

async def phone_handler(update, context):
    user_id = update.effective_user.id
    step = context.user_data.get('step')
    message_type = 'text' if update.message.text else 'contact' if update.message.contact else 'other'
    logger.info(f"phone_handler: user_id={user_id}, step={step}, message_type={message_type}")

    if step != 'waiting_for_phone':
        logger.warning(f"❌ phone_handler: noto‘g‘ri step={step}")
        await fallback_handler(update, context)
        return 'WAIT_PHONE'

    phone = None
    if update.message.contact:
        phone = update.message.contact.phone_number
        if not re.match(r'^\+998[379]\d{7}$', phone.replace(' ', '')):
            await update.message.reply_text(
                "❌ Kontakt orqali yuborilgan telefon raqami noto‘g‘ri formatda.\n"
                "Iltimos, O‘zbekiston mobil raqamini (+998 bilan boshlanadigan) yuboring.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("🔁 Qayta boshlash", callback_data="restart"),
                     InlineKeyboardButton("🦸 Yordam so‘rash", callback_data="help_request")]
                ])
            )
            logger.info(f"❌ Noto‘g‘ri kontakt formati: user_id={user_id}, phone={phone}")
            return 'WAIT_PHONE'
        logger.info(f"📲 Kontakt orqali telefon: {phone}")
    elif update.message.text:
        text = update.message.text.strip()
        cleaned = re.sub(r'\D', '', text)
        if re.match(r'^\+?998[379]\d{7}$', text.replace(' ', '')) or (len(cleaned) == 12 and cleaned.startswith('998')):
            phone = f"+{cleaned}"
            logger.info(f"📝 Matn orqali telefon: {phone}")
        else:
            await update.message.reply_text(
                "❌ Telefon raqami noto‘g‘ri formatda.\n"
                "Iltimos, raqamni +998901234567 shaklida yozing (masalan, +998971234567) yoki 📱 tugmasini bosing.\n"
                "📌 Maslahat: Faqat O‘zbekiston mobil raqamlari qabul qilinadi.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("🔁 Qayta boshlash", callback_data="restart"),
                     InlineKeyboardButton("🦸 Yordam so‘rash", callback_data="help_request")]
                ])
            )
            logger.info(f"❌ Noto‘g‘ri telefon formati: user_id={user_id}, input={text}, cleaned={cleaned}")
            context.user_data['phone_attempts'] = context.user_data.get('phone_attempts', 0) + 1
            if context.user_data['phone_attempts'] >= 3:
                await update.message.reply_text(
                    "❌ 3 marta noto‘g‘ri raqam kiritdingiz. Operator bilan bog‘lanmoqchimisiz?",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("🦸 Yordam so‘rash", callback_data="help_request")]
                    ])
                )
                context.user_data['phone_attempts'] = 0
                logger.info(f"Operator yordamiga yo‘naltirildi: user_id={user_id}, attempts=3")
                return None
            return 'WAIT_PHONE'
    else:
        await update.message.reply_text(
            "❌ Telefon raqam yuborilmadi.\n"
            "Iltimos, raqamni +998901234567 shaklida yozing yoki 📱 tugmasini bosing.\n"
            "📌 Maslahat: Faqat O‘zbekiston mobil raqamlari qabul qilinadi.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("🔁 Qayta boshlash", callback_data="restart"),
                 InlineKeyboardButton("🦸 Yordam so‘rash", callback_data="help_request")]
            ])
        )
        logger.info(f"❌ Telefon raqam yuborilmadi: user_id={user_id}, message_type={message_type}")
        return 'WAIT_PHONE'

    context.user_data['phone'] = phone
    context.user_data['step'] = 'waiting_for_contact_method'
    context.user_data.pop('phone_attempts', None)

    user_id_str = str(user_id)
    if user_id_str in USERS:
        USERS[user_id_str]['phone'] = phone
        save_users(USERS)

    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("📱 Shu bot orqali", callback_data="contact_bot")],
        [InlineKeyboardButton("☎️ Qo‘ng‘iroq orqali", callback_data="contact_call")],
        [InlineKeyboardButton("📩 SMS orqali", callback_data="contact_sms")],
        [InlineKeyboardButton("🔄 Boshqa usul orqali", callback_data="contact_other")]
    ])
    await update.message.reply_text(
        f"✅ Telefon raqamingiz qabul qilindi: {phone}\n"
        "Qanday usulda bog‘lanishimizni xohlaysiz?",
        reply_markup=markup
    )
    logger.info(f"✅ Telefon raqami qabul qilindi: user_id={user_id}, phone={phone}")
    return 'WAIT_CONTACT_METHOD'

async def inline_query_handler(update, context):
    try:
        query = update.inline_query.query.strip()
        user_id = update.inline_query.from_user.id
        logger.info(f"Inline query: user_id={user_id}, query={query}")
        results = []

        results.append(
            InlineQueryResultArticle(
                id="prompt_service_name",
                title="✍️ Xizmat nomini yozing",
                description="Masalan: printer chiqarish, kserokopiya, dizayn, reklama...",
                input_message_content=InputTextMessageContent("🚀 Xizmat izlash boshlandi..."),
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("📢 Bizni telegramda kuzating!", url="https://t.me/texnosetUZ")]
                ])
            )
        )

        services = context.bot_data.get('services', get_services())
        for service in services:
            if query.lower() in service["name"].lower():
                results.append(
                    InlineQueryResultArticle(
                        id=str(uuid4()),
                        title=service["name"],
                        description=f"{service['price']} so‘m",
                        input_message_content=InputTextMessageContent(f"#XIZMAT#{service['id']}")
                    )
                )

        await update.inline_query.answer(results, cache_time=0)
        logger.info(f"✅ Inline query javobi yuborildi: user_id={user_id}, query={query}, results={len(results)}")

    except telegram.error.TimedOut:
        logger.error(f"❌ Inline query vaqt tugashi xatosi: user_id={user_id}, query={query}")
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="❌ Xizmat qidirishda vaqt tugadi. Iltimos, qayta urinib ko‘ring yoki /start bilan boshlang.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("🔍 Qayta qidirish", switch_inline_query_current_chat=""),
                     InlineKeyboardButton("🔁 Qayta boshlash", callback_data="restart")]
                ])
            )
        except Exception as e:
            logger.error(f"❌ Foydalanuvchiga xabar yuborishda xato: user_id={user_id}, xato={e}")
    except Exception as e:
        logger.error(f"❌ Inline query javobida xato: user_id={user_id}, xato={e}")
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="❌ Xizmat qidirishda xato yuz berdi. Iltimos, qayta urinib ko‘ring yoki /start bilan boshlang.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("🔍 Qayta qidirish", switch_inline_query_current_chat=""),
                     InlineKeyboardButton("🔁 Qayta boshlash", callback_data="restart")]
                ])
            )
        except Exception as e:
            logger.error(f"❌ Foydalanuvchiga xabar yuborishda xato: user_id={user_id}, xato={e}")

async def error_handler(update, context):
    logger.error(f"Xato yuz berdi: {context.error}", exc_info=context.error)
    user_id = None

    if update and update.effective_user:
        user_id = update.effective_user.id

    if user_id:
        try:
            if update.message:
                await update.message.reply_text(
                    "❌ Botda xato yuz berdi. Iltimos, /start bilan qayta boshlang yoki yordam so‘rang.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("🔁 Qayta boshlash", callback_data="restart"),
                         InlineKeyboardButton("🆘 Yordam so‘rash", callback_data="help_request")]
                    ])
                )
            elif update.inline_query:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="❌ Qidirishda xato yuz berdi. Iltimos, /start bilan qayta boshlang yoki qayta urinib ko‘ring.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("🔍 Qayta qidirish", switch_inline_query_current_chat=""),
                         InlineKeyboardButton("🔁 Qayta boshlash", callback_data="restart")]
                    ])
                )
            logger.info(f"Xato xabari yuborildi: user_id={user_id}")
        except Exception as e:
            logger.error(f"❌ Xato xabarini yuborishda xato: user_id={user_id}, xato={e}")